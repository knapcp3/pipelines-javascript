trigger:
  - '*'
  
  pool:
    name: Default
  
  variables:
    image_name: mcr.microsoft.com/businesscentral/sandbox
    container_name: Build
    company_name: My Company
    user_name: admin
    password: P@ssword1
    license_file: C:\Users\james.pearson.TECMAN\Desktop\Licence.flf
  
  stages:
  - stage: build
    displayName: Build
    jobs:
    - job: Build
      pool:
        name: Default
      steps:
        - task: PowerShell@1    
          displayName: Create build container
          inputs:
            scriptType: inlineScript
            inlineScript: > 
              Import-Module navcontainerhelper;
              $Credential = [PSCredential]::new('$(user_name)',(ConvertTo-SecureString '$(password)' -AsPlainText -Force));
              New-NavContainer -accept_eula -accept_outdated -containerName '$(container_name)' -auth NavUserPassword -credential $Credential -image $(image_name) -licenseFile $(license_file) -doNotExportObjectsToText -restart no -shortcuts None -useBestContainerOS -includeTestToolkit -includeTestLibrariesOnly -updateHosts
    
        - task: PublishTestResults@2
          displayName: Upload test results    
          inputs:
            failTaskOnFailedTests: true
            testResultsFormat: XUnit
            testResultsFiles: '*.xml'
            searchFolder: C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\my
  
        - task: PublishBuildArtifacts@1
          displayName: Publish build artifacts
          inputs:
            ArtifactName: App Package
            PathtoPublish: $(Build.ArtifactStagingDirectory)
  
        - task: PowerShell@1
          displayName: Remove build container
          inputs:
            scriptType: inlineScript
            inlineScript: >
              Import-Module navcontainerhelper;
              Remove-NavContainer $(container_name)
          condition: always()
  - stage: Release
    displayName: Release
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
    - deployment:
      displayName: Release
      pool:
        name: Default
      environment: Release
      strategy:
        runOnce:
          deploy:
            steps:               
              - task: PowerShell@1
                displayName: Copy artifacts to release directory                  
                inputs:
                  scriptType: inlineScript
                  inlineScript: >
                    $Path = Split-Path '$(System.ArtifactsDirectory)' -Parent;
                    $Artifact = "$Path\App Package\*.app";
                    Copy-Item $Artifact 'C:\Release\';



###
                    # steps:
                    # - script: ./buildSomething.sh
                    # - task: CopyFiles@2
                    #   inputs:
                    #     SourceFolder: '$(System.DefaultWorkingDirectory)'
                    #     Contents: |
                    #       **\*.js
                    #       package.json
                    #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
                    # - task: PublishBuildArtifacts@1


###
# - stage: deploy
# jobs:
# - deployment: DeployWeb
#   displayName: deploy Web App
#   pool:
#     vmImage: 'Ubuntu-latest'
#   # creates an environment if it doesn't exist
#   environment: 'smarthotel-dev'
#   strategy:
#     runOnce:
#       deploy:
#         steps:
#         - script: echo Hello world